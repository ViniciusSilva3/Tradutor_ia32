section .text
global _start
_start:
	push RESPONSE
	push 10
	call Ler_String
	push RESPONSE
	push 10
	call Escrever_String
	push RESPONSE2
	push 1
	call Ler_String
	push RESPONSE2
	push 1
	call Escrever_String
	mov eax, 1
	mov ebx, 0
	int 80h
Escrever_String:
	push ebp ;guarda o valor para pegar os parametros
	mov ebp, esp
	mov esi, dword [ebp+12]
	mov edi, [ebp + 8]
	mov eax, 4
	mov ebx, 1
	mov ecx, esi
	mov edx, edi
	int 80h
	pop ebp
	ret
Ler_String:
	push ebp ;guarda o valor para pegar os parametros
	mov ebp, esp
	mov esi, dword [ebp+12]
	mov edi, [ebp + 8]
	 ;faz a leitura da string
	mov eax, 3
	mov ebx, 0
	mov ecx, esi
	mov edx, edi
	int 80h
	add eax, 0x30
	mov [input_string], eax
	 ;imprime quantos caracteres foram lidos
	mov eax, 4
	mov ebx, 1
	mov ecx, read_string_msg1
	mov edx, str1_size
	int 80h
	mov eax, 4
	mov ebx, 1
	mov ecx, input_string
	mov edx, 4
	int 80h
	mov eax, 4
	mov ebx, 1
	mov ecx, read_string_msg2
	mov edx, str2_size
	int 80h
	pop ebp
	ret

section .bss
RESPONSE resb 52
RESPONSE2 resb 8
input_string resb 4

section .data
UM dw 1
read_string_msg1 db 'Foram lidos '
str1_size EQU $-read_string_msg1
read_string_msg2 db ' Caracteres', 0dh, 0ah
str2_size EQU $-read_string_msg2
